// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    username      String    @unique
    name          String?
    email         String?   @unique
    telephone     String?
    emailVerified DateTime?
    image         String?
    isPusblished  Boolean   @default(false)
    isCreated     Boolean   @default(false)

    profileImage String?
    title        String?
    location     String?
    website      String?
    description  String?

    accounts Account[]
    sessions Session[]

    experiences      Experience[]
    experienceActive Boolean      @default(false)
    educations       Education[]
    educationActive  Boolean      @default(false)
    languages        Language[]
    languagActive    Boolean      @default(false)
    internships      Internship[]
    internshipActive Boolean      @default(false)
    skills           Skill[]
    skillsActive     Boolean      @default(false)
    contacts         Contact[]

    status Status?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Experience {
    id       String  @id @default(cuid())
    title    String
    location String
    company  String
    website  String?

    description String
    fromYear    String
    toYear      String?

    isDraft Boolean @default(true)

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([title])
}

model Internship {
    id       String  @id @default(cuid())
    title    String
    location String
    company  String
    website  String?

    description String
    fromYear    String
    toYear      String?

    isDraft Boolean @default(true)

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([title])
}

model Education {
    id       String  @id @default(cuid())
    title    String
    location String
    school   String
    website  String?

    description String
    fromYear    String
    toYear      String?

    isDraft Boolean @default(true)

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([title])
}

model Language {
    id       String  @id @default(cuid())
    title    String
    value    Int
    isNative Boolean @default(false)

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([title])
}

model Skill {
    id    String @id @default(cuid())
    title String

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([title])
}

model Contact {
    id           String @id @default(cuid())
    contactType  String
    contactValue String

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Status {
    id    String  @id @default(cuid())
    title String
    emoji String?

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
